install.packages("KernSmooth")
library(KernSmooth)
setwd("~/")
setwd("D:/Education/Data Science/Working Directory")
dir()
make.NagLogLik <- function(data, fixed=c(FALSE,FALSE)){
params <- fixed
function(p){
params[!fixed]<-p
mu <- params[1]
sigma <- params[2]
a<- -0.5*length(data)*log(2*pi*sigma^2)
b<- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
?NagLogLik
??NagLogLik
set.seed(1);
normals <-rnorm(100,1,2)
class(normals)
length(normals)
normals
means(normals)
mean(normals)
std(normals)
normals <-rnorm(100,1,2)
mean(normals)
normals <-rnorm(100,1,2)
mean(normals)
nLL<-make.NagLogLik(normals)
nLL
environment(nLL)
ls(environment(nLL))
?ls
ls(envirnoment(make.NagLogLik()))
optim(c(mu=0,sigma=1),nLL)
optim(c(mu=0,sigma=1),nLL)$par
nLL<-make.NegLogLik(normals,c(1,FALSE))
nLL<-make.NegLogLik(normals
)
?source
source(Scoping_Rules_3.R)
source("Scoping_Rules_3.R")
nLL<-make.NegLogLik(normals,c(1,FALSE))
?make.NegLogLik
nLL<-make.NagLogLik(normals)
nLL
nLL<-make.NagLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9.len=100)
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="1")
plot(x,exp(-(y-min(y))),type=1)
plot(x,exp(-(y-min(y))),type="1")
?plot
plot(x,exp(-(y-min(y))),type="l")
class(nLL)
optim(c(mu=0,sigma=1),nLL)$par
nLL
x<-as.date("1970-01-01")
x<-as.Date("1970-01-01")
unclass(x)
x + 5
unclass(x+5)
cube<-function(x,n){
x^3
}
cube(3)
x<-1:10
if(x>5){x<-0}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
load("D:/Education/Data Science/02 - R Programming/Programming_Assignments/ProgrammingAssignment1/ProgrammingAssignment1.RData")
ls()
setwd("D:/Education/Data Science/09 - Develop Data Product/W1-04")
library(manipulate)
myHist <- function(mu) {
hist(galton$child, col="blue", breaks=100)
lines(c(mu, mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step=0.5))
load(galton)
using(galton)
use(galton)
library(galton)
library(shidy)
library(shiny)
setwd("D:/Education/Data Science/Working Directory")
library(manipulate)
myHist <- function(mu) {
hist(galton$child, col="blue", breaks=100)
lines(c(mu, mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step=0.5))
require(galton)
data(galton)
library(datasets)
myHist <- function(mu) {
hist(galton$child, col="blue", breaks=100)
lines(c(mu, mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step=0.5))
hist(airquality$Ozone)
?lm
?mean
?show
?predict
?colSums
?predict
setwd("D:/Education/Data Science/09 - Develop Data Product/Course Project Final")
library(slidify)
slidify("Reproducible Pitch/index.Rmd")
slidify("Reproducible Pitch/index.Rmd")
publish_rpubs("DDP-Course_Project-Final",html_file = "Reproducible Pitch/index.html")
install.packages("RCurl")
install.packages("RCurl")
setwd("D:/Education/Data Science/09 - Develop Data Product/Course Project Final")
publish_rpubs("DDP-Course_Project-Final",html_file = "Reproducible Pitch/index.html")
library(slidify)
publish_rpubs("DDP-Course_Project-Final",html_file = "Reproducible Pitch/index.html")
publish_rpubs("DDP-Course_Project-Final",html_file = "Reproducible Pitch\index.html")
publish_rpubs("DDP-Course_Project-Final",html_file = "./Reproducible Pitch/index.html")
setwd("D:/Education/Data Science/09 - Develop Data Product/Course Project Final/Reproducible Pitch")
publish_rpubs("DDP-Course_Project-Final",html_file = "index.html")
slidify("index.Rmd")
slidify("index.Rmd")
publish_rpubs("DDP-Course_Project-Final",html_file = "index.html")
publish_rpubs("DDP-Course_Project-Final",html_file = "index.html")
publish(title = "DDP-Course_Project-Final", 'index.html', host = 'rpubs')
?require
slidify("index.Rmd")
